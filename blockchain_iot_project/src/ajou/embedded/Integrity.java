package ajou.embedded;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class Integrity extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50610915806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063269c59741461006757806357a4b3f41461011a578063627b9d50146101fc5780636d0d9f1214610272575b600080fd5b34801561007357600080fd5b50610092600480360381019080803590602001909291905050506102a3565b604051808360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156100de5780820151818401526020810190506100c3565b50505050905090810190601f16801561010b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561012657600080fd5b50610181600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061037b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c15780820151818401526020810190506101a6565b50505050905090810190601f1680156101ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020857600080fd5b50610270600480360381019080803560ff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610651565b005b34801561027e57600080fd5b50610287610808565b604051808260ff1660ff16815260200191505060405180910390f35b6000818154811015156102b257fe5b90600052602060002090600202016000915090508060000160009054906101000a900460ff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b5050505050905082565b606060008090505b6001600080549050038160ff1610156104dc57826040518082805190602001908083835b6020831015156103cc57805182526020820191506020810190506020830392506103a7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008260ff1681548110151561040f57fe5b9060005260206000209060020201600101604051808280546001816001161561010002031660029004801561047b5780601f1061045957610100808354040283529182019161047b565b820191906000526020600020905b815481529060010190602001808311610467575b505091505060405180910390206000191614156104cf576040805190810160405280601681526020017f706c65617365206669726d776172652075706461746500000000000000000000815250915061064b565b8080600101915050610383565b826040518082805190602001908083835b60208310151561051257805182526020820191506020810190506020830392506104ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008081548110151561055257fe5b906000526020600020906002020160010160405180828054600181600116156101000203166002900480156105be5780601f1061059c5761010080835404028352918201916105be565b820191906000526020600020905b8154815290600101906020018083116105aa575b50509150506040518091039020600019161415610612576040805190810160405280601581526020017f796f7572206669726d7761726520697320736166650000000000000000000000815250915061064b565b6040805190810160405280601781526020017f796f7572206669726d7761726520697320756e7361666500000000000000000081525091505b50919050565b60008060019150600090505b60008054905081101561077557826040518082805190602001908083835b6020831015156106a0578051825260208201915060208101905060208303925061067b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000828154811015156106e057fe5b9060005260206000209060020201600101604051808280546001816001161561010002031660029004801561074c5780601f1061072a57610100808354040283529182019161074c565b820191906000526020600020905b815481529060010190602001808311610738575b5050915050604051809103902060001916141561076857600091505b808060010191505061065d565b811561080257600060408051908101604052808660ff168152602001858152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010190805190602001906107fd929190610844565b505050505b50505050565b60008060016000805490500381548110151561082057fe5b906000526020600020906002020160000160009054906101000a900460ff16905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061088557805160ff19168380011785556108b3565b828001600101855582156108b3579182015b828111156108b2578251825591602001919060010190610897565b5b5090506108c091906108c4565b5090565b6108e691905b808211156108e25760008160009055506001016108ca565b5090565b905600a165627a7a723058209b89095718ba253e1c5ac464d693a3de6b7293f1924404a781e68ff39cc3b5430029";

    public static final String FUNC_FIRMWARELIST = "FirmwareList";

    public static final String FUNC_CHECKFIRMWARE = "checkFirmware";

    public static final String FUNC_ADDFIRMWARE = "addFirmware";

    public static final String FUNC_CHECKVERSION = "checkVersion";

    protected Integrity(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Integrity(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<Tuple2<BigInteger, String>> FirmwareList(BigInteger param0) {
        final Function function = new Function(FUNC_FIRMWARELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> checkFirmware(String moteHash) {
        final Function function = new Function(FUNC_CHECKFIRMWARE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(moteHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addFirmware(BigInteger _version, String _hash) {
        final Function function = new Function(
                FUNC_ADDFIRMWARE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_version), 
                new org.web3j.abi.datatypes.Utf8String(_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> checkVersion() {
        final Function function = new Function(FUNC_CHECKVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Integrity> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Integrity.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Integrity> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Integrity.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Integrity load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Integrity(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Integrity load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Integrity(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
